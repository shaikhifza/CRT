 #Graphs
class GraphList:
    def __init__(self):
        self.graph={}
    def add_edge(self,u,v):
        if u not in self.graph:
            self.graph[u]=[]
    #add the nide v if it's not in the graph    
        if v not in self.graph:
            self.graph[v]=[]
    #since it's an undirected graph add each to other's list    
        self.graph[u].append(v)
        self.graph[v].append(u)
    def display(self):
        print("Adjacency List:")
        for i in self.graph:
            print(f"{i}-->{self.graph[i]}")
     def bfs(self,start):
        visited=set()
        queue=[start]
        while queue:
            vertex=queue.pop(0)
            if vertex not in visited:
                visited.add(vertex)
                print(vertex,end=" ")
                for i in self.graph[vertex]:
                    if i not in visited:
                        queue.append(i)

g=GraphList()
g.add_edge(1,2)
g.add_edge(1,3)
g.add_edge(2,4)
g.add_edge(2,5)
g.add_edge(3,4)
g.add_edge(4,5)
g.add_edge(5,6)
g.add_edge(6,7)
g.display()
g.bfs(5)
       
#adj matrix
class GraphAdjMatrix:
    def __init__(self,size=None,adj_matrix=None):
        if adj_matrix is not None:
            self.adj_matrix=adj_matrix
            self.size=len(adj_matrix)
        else:
            self.size=size
            self.adj_matrix=[[0 for _ in range(size)] for _ in range(size)]
    
    
    def add_edge(self,u,v):
        if u < self.size and v < self.size:
            self.adj_matrix[u][v]=1
            self.adj_matrix[v][u]=1
        
    def display(self):
        print("Adjacency Matrix:")
        for row in self.adj_matrix:
            print(" ".join(map(str,row)))


adj_matrix=[
    [0,1,1,0,0,0,0],
    [1,0,0,1,0,0,0],
    [1,0,0,1,0,0,0],
    [0,1,1,0,1,0,0],
    [0,0,0,1,0,1,0],
    [0,0,0,0,1,0,1],
    [0,0,0,0,0,1,0]]
g=GraphAdjMatrix(adj_matrix=adj_matrix)    
g.display()


#dfs
class GraphList:
    def __init__(self):
        self.graph={}
    def add_edge(self,u,v):
        if u not in self.graph:
            self.graph[u]=[]
    #add the nide v if it's not in the graph    
        if v not in self.graph:
            self.graph[v]=[]
    #since it's an undirected graph add each to other's list    
        self.graph[u].append(v)
        self.graph[v].append(u)
    def display(self):
        print("Adjacency List:")
        for i in self.graph:
            print(f"{i}-->{self.graph[i]}")
    def dfs(self,start,visited=None):
        if visited is None:
            visited=set()#to check visited or not visited
        visited.add(start)
        print(start,end=" ")
        for i in self.graph[start]:
            if i not in visited:
                self.dfs(i,visited)

g=GraphList()
g.add_edge(1,2)
g.add_edge(1,3)
g.add_edge(2,4)
#g.add_edge(2,5)
g.add_edge(3,4)
g.add_edge(4,5)
g.add_edge(5,6)
g.add_edge(6,7)
g.display()
g.dfs(1)

#class Solution:
    def countFreq(self, arr, target):
        #code here
        count=0
        for i in range(0,len(arr)):
            if arr[i]==target:
                 count+=1

        return count
#count the no of zeros
class Solution:
    def countZeroes(self, arr):
        # code here
        count=0
        for i in range(0,len(arr)):
            if(arr[i]==0):
                count+=1
                
        return count    
#missing element
class Solution:
    def missingNum(self, arr):
        # code here
        n=len(arr)+1
        formula=(n*(n+1))//2
        sum_arr=0
        for i in arr:
            sum_arr=sum_arr+i
        return formula-sum_arr  
#val equal
class Solution:
    # Function to find values in array equal to their indices
    def valueEqualToIndex(self, arr):
        val=[]
        
        for i in range(0,len(arr)):
            if arr[i]==i+1:
                val.append(arr[i])
        return val  
        
      
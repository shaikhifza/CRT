# MERGE SORT

def merge_sort(arr,start=0,end=None):
    if end is None:
        end=len(arr)-1
    if start<end:
        mid=(start+end)//2
        merge_sort(arr,start,mid)
        merge_sort(arr,mid+1)
        merge(arr,start,mid,end)
def merge(arr,start,mid,end):
    left=arr[start:mid+1]
    right=arr[mid+1:end+1]
    i=j=0
    k=start
    while i<len(left) and j<len(right):
        if left[i]<=right[j]:
            arr[k]=left[i]
            i+=1
        else:
            arr[k]=right[j]
            j+=1
        k+=1
    while i<len(left):
        arr[k]=left[i]
        i+=1
        k+=1
    while j<len(right):
        arr[k]=right[j]
        arr[k]=right[j]
        j+=1
        k+=1
arr=[30,12,4,49,45]
merge_sort(arr)
print(arr)

output:[4,12,30,45,49]


#quick sort

def quick_sort(arr):
    if len(arr)<=1:
        return arr
    left=[]
    right=[]
    equal=[]
    pvt=arr[-1]
    for i in arr:
        if i<pvt:
            left.append(i)
        elif i>pvt:
            right.append(i)
        else:
            equal.append(i)
    print("pivot:",pvt)
    print("left sub array",left)
    print("right sub array",right)
    print("equal array",equal)
    return quick_sort(left)+equal+quick_sort(right)
arr=[23,63,44,57,12,45,36]
sorted_array=quick_sort(arr)
print(sorted_array)

output:
pivot: 36
left sub array [23, 12]
right sub array [63, 44, 57, 45]
equal array [36]
pivot: 12
left sub array []
right sub array [23]
equal array [12]
pivot: 45
left sub array [44]
right sub array [63, 57]
equal array [45]
pivot: 57
left sub array []
right sub array [63]
equal array [57]
[12, 23, 36, 44, 45, 57, 63]

#index of an extra space

class Solution:
    def findExtra(self,a,b):
        minimum_length=min(len(a),len(b))
        for i in range(0,minimum_length):
            if a[i]==b[i]:
                continue
            else:
                return i
        return minimum_length

output:

a[] =
2 4 6 8 9 10 12
b[] =
2 4 6 8 10 12
Your Output:
4
Expected Output:
4


#insertion sort

def insertion_sort(arr):
    for i in range(1,len(arr)):
        key=arr[i]
        j=i-1
        while j>=0 and key<arr[j]:
            arr[j+1]=arr[j]
            j=j-1
        arr[j+1]=key
    return arr
arr=[8,3,14,9]
insert=insertion_sort(arr)
print(insert)


output:

[3, 8, 9, 14]


#Bubble sort

def bubble_sort(arr):
    n=len(arr)
    for i in range(n):
        for j in range(0,n-i-1):
            if arr[j]>arr[j+1]:
                arr[j],arr[j+1]=arr[j+1],arr[j]
    return arr
arr=[8,45,67,88,3,2]
obj1=bubble_sort(arr)
print(obj1)


output:

def bubble_sort(arr):
    n=len(arr)
    for i in range(n):
        for j in range(0,n-i-1):
            if arr[j]>arr[j+1]:
                arr[j],arr[j+1]=arr[j+1],arr[j]
    return arr
arr=[8,45,67,88,3,2]
obj1=bubble_sort(arr)
print(obj1)

